<?xml version="1.0" encoding="utf-8"?>
<Prototypes>
	<Part id="root" type="hull" root="True">
		<Parameter name="health" type="int">100</Parameter>
		<Parameter name="energy_drain" type="int">1</Parameter>
		<Parameter name="energy_storage" type="int">1000</Parameter>
		<Parameter name="min_pressure" type="int">0</Parameter>
		<Parameter name="max_pressure" type="int">1000</Parameter>
		<Parameter name="pressure" type="int">900</Parameter>
		<Parameter name="temperature" type="int">293</Parameter>
		<Icon>
			<Sprite category="Parts">root</Sprite>
		</Icon>
	</Part>
	<Part id="basic_hull" type="hull">
		<Parameter name="health" type="int">100</Parameter>
		<Parameter name="energy_drain" type="int">1</Parameter>
		<Parameter name="energy_storage" type="int">1000</Parameter>
		<Parameter name="min_pressure" type="int">0</Parameter>
		<Parameter name="max_pressure" type="int">1000</Parameter>
		<Parameter name="pressure" type="int">900</Parameter>
		<Parameter name="temperature" type="int">293</Parameter>
		<Icon>
			<Sprite category="Parts">basic_hull</Sprite>
		</Icon>
	</Part>
	<Part id="turret" type="addon">
		<Parameter name="direction" type="string">0</Parameter>
		<Icon>
			<Sprite category="Parts" type="function" id="turret">
				function ( part )
					if part == nil then
						return "turret_1"
					end
					dir = part.GetParameter("direction")
					if dir == nil then return "turret_1" end
					return "turret_" .. dir
				end
			</Sprite>
		</Icon>
	</Part>
	<Part id="winglet" type="hull">
		<Icon>
			<Sprite category="Parts">winglet</Sprite>
		</Icon>
	</Part>
	<Part id="engine_big" type="hull">
		<Icon>
			<Sprite category="Parts">engine_big</Sprite>
			<Sprite category="Effects" type="function" id="flameout_big">
				function ( part )
					if part == nil or part.Ship == nil then
						return "none"
					end
					if part.Ship.isMoving then
						return "flameout_big"
					else
						return "none"
					end
				end
			</Sprite>
		</Icon>
		<Action event="IsAttachableTo">
			function ( this, coord ) 
				return true
			end
		</Action>
		<Action event="IsValidNeighbour">
			-- is other a valid nhbd of this (other is the one you want to attach, this is the one you are attacing to
			-- dir == 0: other is below this
			-- dir == 1: .. right
			-- dir == 2: .. top
			-- dir == 3: .. left
			-- Facing = rotation is Facing * 90 deg
			function ( this, other, direction )
				print(direction .. " AAAAAAAAAAAAA " .. other.Facing)
				if direction == (this.Facing + 2) % 4 then 
					return false
				end
				return true
			end
		</Action>
	</Part>
	<Part id="battery" type="addon">
		<Icon>
			<Sprite category="Parts">battery</Sprite>
		</Icon>
	</Part>
	<Part id="shield_generator" type="addon">
		<Icon>
			<Sprite category="Parts">shield_generator</Sprite>
		</Icon>
	</Part>
	<Part id="pressurizer" type="addon">
		<Icon>
			<Sprite category="Parts">pressurizer</Sprite>
		</Icon>
		<Action event="OnUpdate">
			function ( part ) 
				M = part.Hull.GetParameter("max_pressure")
				m = part.Hull.GetParameter("min_pressure")
				val = part.Hull.GetParameter("pressure") + 5
				-- print(part.Hull.Name .. part.Name .. val)
				-- add safe cast in setparameter or cast to int
				part.Hull.SetParameterAsInt("pressure", math.floor(math.min(math.max(m, val), M)))
			end
		</Action>
	</Part>
	<Part id="heater" type="addon">
		<Icon>
			<Sprite category="Parts">heater</Sprite>
		</Icon>
	</Part>
</Prototypes>