<?xml version="1.0" encoding="utf-8"?>
<Prototypes>
	<Part id="root" type="hull" root="True">
		<Parameter name="health" type="int">100</Parameter>
		<Parameter name="energy_drain" type="int">1</Parameter>
		<Parameter name="energy_storage" type="int">1000</Parameter>
		<Parameter name="min_pressure" type="int">0</Parameter>
		<Parameter name="max_pressure" type="int">1000</Parameter>
		<Parameter name="pressure" type="int">900</Parameter>
		<Parameter name="temperature" type="int">293</Parameter>
		<Icon>
			<Sprite category="Parts">root</Sprite>
		</Icon>
	</Part>
	<Part id="basic_hull" type="hull">
		<Parameter name="health" type="int">100</Parameter>
		<Parameter name="energy_drain" type="int">1</Parameter>
		<Parameter name="energy_storage" type="int">1000</Parameter>
		<Parameter name="min_pressure" type="int">0</Parameter>
		<Parameter name="max_pressure" type="int">1000</Parameter>
		<Parameter name="pressure" type="int">900</Parameter>
		<Parameter name="temperature" type="int">293</Parameter>
		<Icon>
			<Sprite category="Parts">basic_hull</Sprite>
		</Icon>
	</Part>
	<Part id="turret" type="addon">
		<Parameter name="direction" type="string">0</Parameter>
		<Icon>
			<Sprite category="Parts" type="function" id="turret">
				function ( part )
					return "turret_" .. part.GetParameter("direction")
				end
			</Sprite>
		</Icon>
	</Part>
	<Part id="battery" type="addon">
		<Icon>
			<Sprite category="Parts">battery</Sprite>
		</Icon>
	</Part>
	<Part id="shield_generator" type="addon">
		<Icon>
			<Sprite category="Parts">shield_generator</Sprite>
		</Icon>
	</Part>
	<Part id="pressurizer" type="addon">
		<Icon>
			<Sprite category="Parts">pressurizer</Sprite>
		</Icon>
		<Action event="OnUpdate">
			function ( part ) 
				M = part.Hull.GetParameter("max_pressure")
				m = part.Hull.GetParameter("min_pressure")
				val = part.Hull.GetParameter("pressure") + 5
				print(part.Hull.Name .. part.Name .. val)
				-- add safe cast in setparameter or cast to int
				part.Hull.SetParameterAsInt("pressure", math.floor(math.min(math.max(m, val), M)))
			end
		</Action>
	</Part>
</Prototypes>